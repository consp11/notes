----------------------------------------------------------------
Частота работы процессора для конкретных программ
sudo apt install cpulimit

Ограничение скорости процесса 43632 до 20% загрузки процессора
sudo cpulimit -p 43632 -l 20

sudo renice -n 19 `pidof cpulimit`


while [ true ]
do
  sudo renice -n 19 `pidof cpulimit`;

  sudo renice -n 18 `pidof firefox`;
  sudo renice -n 18 `pidof firefox-bin`;
  sudo oinice -c 3  `pidof firefox`;
  sudo oinice -c 3  `pidof firefox-bin`;

  sleep 1;

done


----------------------------------------------------------------
Ограничения памяти и процессора
systemd-run --scope -p MemoryLimit=1000M ./myProcess.sh
systemd-run --scope -p CPUQuota=10% ./myProcess.sh
systemd-run --scope -p MemoryLimit=1000M -p CPUQuota=10% ./myProcess.sh

sudo systemd-run --scope --nice=18 --uid=a1 --gid=a1 -p CPUQuota=10% -p CPUQuotaPeriodSec=1000ms stress -c 1

----------------------------------------------------------------
кто потребляет больше памяти?
# ps aux --sort=%mem | grep -v 'root' | head -n 35

ps axo %mem,pid,user,cmd --sort=%mem | tail -n 2

----------------------------------------------------------------
Ограничения по памяти для пользователя (для каждого процесса пользователя)
ulimit -Sv 1000000

Максимальный размер файла
ulimit -Sf 2000

Просмотр ограничений
ulimit -a

Здесь при выводе указываются ключи, которыми устанавливаются соотв. ограничения.
-S - мягкое ограничение. -H - жёсткое ограничение.

Настройка постоянных ограничений: /etc/security/limits.conf и /etc/security/limits.d/
* (все пользователи, кроме root) hard или soft  name    value
Например, запретить создание файлов дампа памяти ядра
* hard core 0
root hard core 0


Ограничения дискового ввода-вывода
ionice --class 3 ./myProcess.sh

Классы:
3 (Idle): получение возможности ввода-вывода, если другие программы не запрашивали его некоторый отрезок времени

2: получение по приоритету

1: реальное время

-n число - приоритет для 2-ого класса: число от 0 до 7-ми (0 - высший приоритет)

-p pid - приоритет для уже запущенного процесса


Приоритеты процессов
nice -n 19 ./myProcess.sh
(от -20 до +19) - -20 - высший

Изменяем приоритет процесса с pid=20935
renice -n 19 20935


Группы контроля
https://www.baeldung.com/linux/limit-resource-consumption
sudo apt-get install cgroup-tools
sudo cgcreate -t $USER:$USER -a $USER:$USER -g cpu:/cpunormalusage
sudo cgcreate -t $USER:$USER -a $USER:$USER -g cpu:/cpulowusage


# a1:first - принадлежность контрольной группы к пользователю и группе
sudo cgcreate -t a1:first -a a1:first -g cpu:cpunormalusage
sudo cgcreate -t a1:first -a a1:first -g cpu:cpulowusage

Получить параметры
cgget -n -g cpu /

# man systemd.resource-control
# https://www.kernel.org/doc/html/latest/admin-guide/cgroup-v2.html

# По-умолчанию - 100
cgset -r cpu.weight=10 cpulowusage

# Ограничение на процент. В тысячах процентов и в тысячах миллисекунд. от 1 до 1000 ms
cgset -r cpu.max='11000 999000' cpulowusage

cgexec -g cpu:cpulowusage firefox &

# Пример ограничения 10,1% от cpu на задачу за 1 секунду времени
sudo cgcreate -g cpu:g2 -t a1:first -a a1:first
sudo cgset -r cpu.max='101000 1000000' g2
sudo cgexec -g cpu:g2 stress -c 1

# Не проверенный пример
1. create a memory cgroup
    sudo cgcreate -g memory:$test_db -t $User:$User -a $User:$User

2. limit the group's RAM usage to 1G. 
    echo 1000M > /sys/fs/cgroup/memory/$test_db/memory.limit_in_bytes
    or 
    echo 1000M > /sys/fs/cgroup/memory/$test_db/memory.soft_limit_in_bytes

3. run the database program in the $test_db cgroup
   cgexec -g memory:$test_db $db_program_name



/etc/security/limits.conf
Правило выглядит так
<domain> <type> <item> <item>
domain — это пользователь или группа, для которых лимитируем ресурсы

type — тип ограничения: soft или hard, ограничение soft может быть переопределено пользователем.

item — ресурс, который ограничиваем — обычно это cpu (в минутах) или as — максимальное количество оперативной памяти (в Кб); также можно задать nice level, который не сможет быть превышен процессами пользователя/группы (минимум 20, максимум -19); здесь же можно задать chroot (только для debian)

item — само численное значение

Для того чтобы изменения вступили в силу нужна перезагрузка. (да????)

----------------------------------------------------------------
chrt

chrt [options] priority command argument ...
chrt [options] -p [priority] PID

chrt -b 0 комманда
Запускает команду с режимом SCHED_BATCH

-f - FIFO
-r - round robin
-o - other (normal)
-d - deadline
-b - batch
-i - idle

-T runtime_parameter in nanoseconds
-p, --pid	Operate on an existing PID and do not launch a new task.
chrt -p PID - retrive attributes
chrt -r -p priority PID

chrt -p `pidof xfce4-terminal`
chrt -b -p 0 `pidof xfce4-terminal`


pidof -q opera
while [ $? -eq 1 ]
do
	sleep 0.06
	pidof -q opera
done

for opPID in `pidof opera`
do
	sudo chrt -vf -p 1 $opPID
done

FIFO, похоже, отменяет ограничения cgroups


nice влияет только на SCHED_OTHER и SCHED_BATCH


chrt -m
SCHED_OTHER min/max priority	: 0/0
SCHED_FIFO min/max priority		: 1/99
SCHED_RR min/max priority		: 1/99
SCHED_BATCH min/max priority	: 0/0
SCHED_IDLE min/max priority		: 0/0
SCHED_DEADLINE min/max priority	: 0/0

99 - высокий

man sched


http://debianinstall.ru/klassy-i-prioritety-protsessov-linux/
Кроме приоритетной очереди, планировщик Linux позволяет использовать еще два алгоритма планирования — FIFO и RR, предназначенные для задач реального времени. Вытесняющий алгоритм RR (round robin) организует простейшее циклическое обслуживание с фиксированными квантами времени, тогда как FIFO (first in first out) является его невытесняющей модификацией, позволяя задаче выполняться непрерывно долго, до момента ее засыпания. По сути, оба алгоритма организуют задачи в одну приоритетную очередь (PQ, priority queue) со статическими приоритетами на шкале от 1 до 99, выбирая для выполнения всегда самую высокоприоритетную из множества готовых.

Перевод задачи под управление тем или алгоритмом планирования производится при помощи назначения ей политики планирования (scheduling policy) посредством команды chrt. Различают пять политик планирования, три из которых — SCHED_OTHER, SCHED_BATCH и SCHED_IDLE — реализуются алгоритмом CFS, а две оставшиеся — SCHED_FIFO, SCHED_RR — одноименными алгоритмами FIFO и RR. Политика SCHED_OTHER, она же SCHED_NORMAL, применяется по умолчанию и обслуживает класс задач TS (time sharing), требующих «интерактивности», а политика SCHED_BATCH предназначается для выполнения «вычислительных» задач класса пакетной В (batch) обработки.
Разница между политиками состоит в том, что планировщик в случае необходимости всегда прерывает задачи класса В в пользу задач класса TS, но никогда наоборот.

Политика SCHEDIDLE формирует класс задач, выполняющихся только при «простое» (idle) центрального процессора за счет выделения им планировщиком CFS очень небольшой доли процессорного времени. Для этого задачам IDL-класса назначают минимально возможный вес — меньший, чем вес самых «любезных» (NICE = +19) задач TS -класса.

Алгоритм планирования RR (равно как и FIFO) всегда выбирает процесс с самым высоким статическим приоритетом из множества готовых, поэтому процессам с более низкими приоритетами процессорное время будет выделено только при засыпании всех процессов с большими приоритетами.
